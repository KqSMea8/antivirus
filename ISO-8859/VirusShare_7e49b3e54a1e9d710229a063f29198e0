table.insert(GLOBAL.STRINGS, "DFV_LANG")
table.insert(GLOBAL.STRINGS, "DFV_HUNGER")
table.insert(GLOBAL.STRINGS, "DFV_HEALTH")
table.insert(GLOBAL.STRINGS, "DFV_SANITY")
table.insert(GLOBAL.STRINGS, "DFV_SPOILSOON")
table.insert(GLOBAL.STRINGS, "DFV_SPOILIN")
table.insert(GLOBAL.STRINGS, "DFV_SPOILDAY")
table.insert(GLOBAL.STRINGS, "DFV_MIN")

local DFV_LANG = GetModConfigData("DFV_Language")
local DFV_MIN = not (GetModConfigData("DFV_MinimalMode")=="default")

GLOBAL.STRINGS.DFV_MIN = DFV_MIN
GLOBAL.STRINGS.DFV_LANG = DFV_LANG

if DFV_LANG == "FR" then
	GLOBAL.STRINGS.DFV_HUNGER = "Points de faim"
	GLOBAL.STRINGS.DFV_HEALTH = "Points de vie"
	GLOBAL.STRINGS.DFV_SANITY = "Sante mentale"
	GLOBAL.STRINGS.DFV_SPOILSOON = "Pourrira bientot"
	GLOBAL.STRINGS.DFV_SPOILIN = "Pourrira dans"
	GLOBAL.STRINGS.DFV_SPOILDAY = "jour"
else
	GLOBAL.STRINGS.DFV_HUNGER = "±¥Ê³"
	GLOBAL.STRINGS.DFV_HEALTH = "½¡¿µ"
	GLOBAL.STRINGS.DFV_SANITY = "ÉñÖÇ"
	GLOBAL.STRINGS.DFV_SPOILSOON = "ºÜ¿ì»á¸¯ÀÃ"
	GLOBAL.STRINGS.DFV_SPOILIN = "»á¸¯ÀÃÔÚ"
	GLOBAL.STRINGS.DFV_SPOILDAY = "Ìì"
end

local require = GLOBAL.require
 
local ItemTile = require "widgets/itemtile"
 
local ItemTile_GetDescriptionString_base = ItemTile.GetDescriptionString or function() return "" end

function ItemTile:GetDescriptionString()

    local str = ItemTile_GetDescriptionString_base(self)
 	
    if self.item ~= nil and self.item:IsValid() and self.item.replica.inventoryitem ~= nil then
    	
		local realfood = nil
		local show_spoil = GLOBAL.TheInput:IsControlPressed(GLOBAL.CONTROL_FORCE_INSPECT)
		
        local player = GLOBAL.ThePlayer
        local actionpicker = player.components.playeractionpicker
        local active_item = player.replica.inventory:GetActiveItem()
        
        local actions = actionpicker:GetInventoryActions(self.item)
        if #actions > 0 then
		    for k,v in pairs(actions) do
				if v.action == GLOBAL.ACTIONS.EAT or v.action == GLOBAL.ACTIONS.HEAL then
				    realfood = true
				    break
				end
		    end
        end
        
        local strings = GLOBAL.STRINGS
        
		if self.item.components.edible and realfood then

		    local hungervalue = 0
		    local healthvalue = 0
		    local sanityhvalue = 0
		    
		    if player.components.eater and player.components.eater.monsterimmune then--ThePlayer.prefab == "webber" then
				if self.item.components.edible.hungervalue < 0 and player.components.eater:DoFoodEffects(self.item) or self.item.components.edible.hungervalue > 0 then
				    hungervalue = math.floor(self.item.components.edible:GetHunger(player) * 10 + 0.5) / 10
				end
				if self.item.components.edible.healthvalue < 0 and player.components.eater:DoFoodEffects(self.item) or self.item.components.edible.healthvalue > 0 then
				    healthvalue = math.floor(self.item.components.edible:GetHealth(player) * 10 + 0.5) / 10
				end
				if self.item.components.edible.sanityvalue < 0 and player.components.eater:DoFoodEffects(self.item) or self.item.components.edible.sanityvalue > 0 then
				    sanityhvalue = math.floor(self.item.components.edible:GetSanity(player) * 10 + 0.5) / 10
				end
			else
				hungervalue = math.floor(self.item.components.edible:GetHunger(player) * 10 + 0.5) / 10
				healthvalue = math.floor(self.item.components.edible:GetHealth(player) * 10 + 0.5) / 10
				sanityhvalue = math.floor(self.item.components.edible:GetSanity(player) * 10 + 0.5) / 10
			end
			
			if strings.DFV_MIN then			
				if hungervalue ~= 0 or healthvalue ~= 0 or sanityhvalue ~= 0 then
					str = str .. "\n"
				end
						
			    if hungervalue ~= 0 then
					str = str .. "\153" .. " " .. hungervalue .. " "
			    end
			    if healthvalue ~= 0 then
					str = str .. "\151" .. " " .. healthvalue .. " "
			    end
			    if sanityhvalue ~= 0 then
					str = str .. "\152" .. " " .. sanityhvalue .. " "
			    end
			else
			    if hungervalue ~= 0 then
					str = str.."\n" .. strings.DFV_HUNGER .. " " .. hungervalue
			    end
			    if healthvalue ~= 0 then
					str = str.."\n" .. strings.DFV_HEALTH .. " " .. healthvalue
			    end
			    if sanityhvalue ~= 0 then
					str = str.."\n" .. strings.DFV_SANITY .. " " .. sanityhvalue
			    end
			
			end
						
		elseif self.item.components.healer and realfood then
		    str = str.."\n" .. strings.DFV_HEALTH .. " " .. self.item.components.healer.health
		end
	
		if self.item.components.perishable and realfood and show_spoil then

		    local owner = self.item.components.inventoryitem and self.item.components.inventoryitem.owner
		    local modifier = 1
		    
		    if owner then				    	
				if owner:HasTag("fridge") then
					if self.item:HasTag("frozen") then
						modifier = TUNING.PERISH_COLD_FROZEN_MULT
					else
						modifier = TUNING.PERISH_FRIDGE_MULT 
					end 
				elseif owner:HasTag("spoiler") then
					modifier = TUNING.PERISH_GROUND_MULT 
				end
			else
				modifier = TUNING.PERISH_GROUND_MULT 
			end						
				
--			if GetSeasonManager() and GetSeasonManager():GetCurrentTemperature() < 0 then
--				if self.item:HasTag("frozen") and not self.item.components.perishable.frozenfiremult then
--					modifier = TUNING.PERISH_COLD_FROZEN_MULT
--				else
--					modifier = modifier * TUNING.PERISH_WINTER_MULT
--				end
--			end
				
			if self.item.components.perishable.frozenfiremult then
				modifier = modifier * TUNING.PERISH_FROZEN_FIRE_MULT
			end
			
--			if TUNING.OVERHEAT_TEMP ~= nil and GetSeasonManager() and GetSeasonManager():GetCurrentTemperature() > TUNING.OVERHEAT_TEMP then
--				modifier = modifier * TUNING.PERISH_SUMMER_MULT
--			end
				
		    modifier = modifier * TUNING.PERISH_GLOBAL_MULT
			
			if modifier ~= 0 then
			    local perishremainingtime = math.floor((self.item.components.perishable.perishremainingtime / TUNING.TOTAL_DAY_TIME / modifier) * 10 + 0.5) / 10
			    if perishremainingtime < 1 then
					str = str.."\n" .. strings.DFV_SPOILSOON
			    elseif strings.DFV_LANG ~= "RU" then
					str = str.."\n" .. strings.DFV_SPOILIN .. " " .. perishremainingtime .. " " .. strings.DFV_SPOILDAY
			    else
					str = str.."\n" .. strings.DFV_SPOILIN .. " " .. perishremainingtime .. " "
			    end
			    if strings.DFV_LANG == "RU" then
					local plural_days = {"äåíü", "äíÿ", "äíåé"}
					local plural_type = function(n)
						if n%10==1 and n%100~=11 then
							return 1
						elseif n%10>=2 and n%10<=4 and (n%100<10 or n%100>=20) then
							return 2
						else
							return 3
						end
					end
					str = str .. plural_days[plural_type(math.modf(perishremainingtime))]
			    else
					if perishremainingtime >=2 then
						if strings.DFV_LANG == "GR" then
							str = str .. "en"
						elseif strings.DFV_LANG == "IT" then
							str = str .. "i"						
						else
							str = str .. "s"
						end
					elseif perishremainingtime >= 1 and strings.DFV_LANG == "IT" then
							str = str .. "o"											
					end
			    end
				local prep_foods = require("preparedfoods")
				if prep_foods[self.item.prefab] ~= nil and prep_foods[self.item.prefab].temperatureduration ~= nil then
					str = str .. " / t "
					if prep_foods[self.item.prefab].temperature < 0 then
						str = str .. "-"
					else
						str = str .. "+"
					end					
					str = str .. prep_foods[self.item.prefab].temperatureduration
				elseif self.item.prefab == "ice" and self.item.components.edible.temperatureduration ~= nil then
					str = str .. " / t "
					if self.item.components.edible.temperaturedelta < 0 then
						str = str .. "-"
					else
						str = str .. "+"
					end					
					str = str .. self.item.components.edible.temperatureduration
				end		    
			else
				str = str .. "\n"
				local prep_foods = require("preparedfoods")
				if prep_foods[self.item.prefab] ~= nil and prep_foods[self.item.prefab].temperatureduration ~= nil then
					str = str .. "t "
					if prep_foods[self.item.prefab].temperature < 0 then
						str = str .. "-"
					else
						str = str .. "+"
					end					
					str = str .. prep_foods[self.item.prefab].temperatureduration
				elseif self.item.prefab == "ice" and self.item.components.edible.temperatureduration ~= nil then
					str = str .. "t "
					if self.item.components.edible.temperaturedelta < 0 then
						str = str .. "-"
					else
						str = str .. "+"
					end					
					str = str .. self.item.components.edible.temperatureduration
				end		    
		    end		    
		end	
	end
	
    return str
        
end